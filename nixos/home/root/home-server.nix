# This is a default home.nix generated by the follwing hone-manager command
#
# home-manager init ./
{
  config,
  lib,
  pkgs,
  ...
}: {
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = lib.mkDefault "root";
  home.homeDirectory = lib.mkDefault "/root";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "24.11"; # Please read the comment before changing.

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = with pkgs; [
    # # Adds the 'hello' command to your environment. It prints a friendly
    # # "Hello, world!" when run.
    # pkgs.hello

    # # It is sometimes useful to fine-tune packages, for example, by applying
    # # overrides. You can do that directly here, just don't forget the
    # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
    # # fonts?
    # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

    # # You can also create simple shell scripts directly inside your
    # # configuration. For example, this adds a command 'my-hello' to your
    # # environment:
    # (pkgs.writeShellScriptBin "my-hello" ''
    #   echo "Hello, ${config.home.username}!"
    # '')
  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/m3tam3re/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;

  services.cliphist = {
    enable = true;
    allowImages = true;
  };

  programs.git = {
    enable = true;
    difftastic.enable = true;
    userName = "awhawks";
    userEmail = "awhawks@writeme.com";
    core = {
        editor= "vi";
        autocrlf = "input";
    };
    aliases = {
      logd  = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit";
      hist  = "log --graph --pretty=format:'%h %ad | %s%d [%an]' --date=short";
      mylog = "log --graph --pretty=format:'%h %s [%an]'";
      log1  = "log --graph --abbrev-commit --all --decorate=short --pretty=oneline --decorate-refs-exclude=refs/tags";
      log2  = "log --graph --abbrev-commit --all --decorate=short --pretty=oneline";
      log3  = "log --graph --abbrev-commit --all --decorate=short --pretty=format:'%C(yellow)%h%Creset%C(auto)%d%Creset %s %C(bold blue)<%an>%Creset'";
      log4  = "log --graph --abbrev-commit --all --decorate=short --pretty=format:'%C(yellow)%h%Creset%C(auto)%d%Creset %s %C(bold blue)<%an>%Creset %C(green)(%ci)%Creset'";
      log5  = "log --graph --abbrev-commit --all --decorate=auto  --pretty=format:'%C(red)%h%Creset -%C(yellow)%d%Creset %s %C(green)(%cr) %C(bold blue)<%an>%Creset'";
      showColors = "log --pretty=format:'\t%C(dim red)dim red%Creset %C(red)red%Creset %C(bold red)bold red%Creset \t%C(dim green)dim green%Creset %C(green)green%Creset %C(bold green)bold green%Creset \t%C(dim yellow)dim yellow%Creset %C(yellow)yellow%Creset %C(bold yellow)bold yellow%Creset \t%C(dim blue)dim blue%Creset %C(blue)blue%Creset %C(bold blue)bold blue%Creset \t%C(dim magenta)dim magenta%Creset %C(magenta)magenta%Creset %C(bold magenta)bold magenta%Creset \t%C(dim cyan)dim cyan%Creset %C(cyan)cyan%Creset %C(bold cyan)bold cyan%Creset \t%C(dim white)dim white%Creset %C(white)white%Creset %C(bold white)bold white%Creset can also %C(ul red)ul red%Creset %C(blink green)blink green%Creset %C(reverse blue red)reverse blue red%Creset'";
    };
    lfs.enable = true;
    prompt.enable = true;
    extraConfig = {
      core.excludesfile = "~/.gitignore_global";
      init.defaultBranch = "main";
    };
  };

  programs.jujutsu = {
    enable = true;
    settings = {
      user = {
        email = "awhawks@writeme.com";
        name = "Adam W. Hawks";
      };
    };
  };

  programs.ssh = {
    enable = true;
    enableDefaultConfig = false;
    matchBlocks = {
      "p50" = {
        hostname = "192.168.60.5";
        user = "awhawks";
        port = 22;
        identityFile = "~/.ssh/id_rsa";
      };
      "myzima1a" = {
        hostname = "192.168.60.6";
        user = "awhawks";
        port = 22;
        identityFile = "~/.ssh/id_rsa";
      };
      "myzima1b" = {
        hostname = "192.168.60.7";
        user = "awhawks";
        port = 22;
        identityFile = "~/.ssh/id_rsa";
      };
      "myzima2a" = {
        hostname = "192.168.60.8";
        user = "awhawks";
        port = 22;
        identityFile = "~/.ssh/id_rsa";
      };
      "myzima2b" = {
        hostname = "192.168.60.9";
        user = "awhawks";
        port = 22;
        identityFile = "~/.ssh/id_rsa";
      };
      "mynas" = {
        hostname = "192.168.60.12";
        user = "awhawks";
        identityFile = "~/.ssh/id_rsa";
      };
    };
  };
}
